/*
 * Copyright (C) INFOGLOBAL TEKNOLOGI SEMESTA, PT - All Rights Reserved.
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential.
 */

/* 
 * File:   main.cpp
 * Author: RIF <arif.lazuardi@infoglobal.co.id>
 *
 * Created on February 27, 2017, 5:05 PM
 */

#include <iostream>
#include <opencv2/core.hpp>

#include "Activation.h"
#include "ActRelu.h"
#include "LayerConvolution.h"
#include "PoolMax.h"
#include "LayerPool.h"
#include "LayerFC.h"
#include "CNN.h"
#include "ActSigmoid.h"
#include "PoolAverage.h"

using namespace std;
using namespace cv;

/*
 * 
 */
int main(int argc, char** argv) {
    
    // INIT
    DataPreparation data; ActSigmoid activation;  PoolAverage pool;
    // LAYERS
    LayerConvolution convolution_1(3,5,1,&activation);
    LayerPool pooling_1(2,2,&pool);   
    LayerConvolution convolution_2(3,5,1,&activation);
    LayerPool pooling_2(2,2,&pool);   
    LayerFC fc(data.train_labels->rows, &activation);
    // CNN
    CNN cnn;
    cnn.set_data(&data);
    cnn.push_layer(&convolution_1);
    cnn.push_layer(&pooling_1);
    cnn.push_layer(&convolution_2);
    cnn.push_layer(&pooling_2);
    cnn.push_layer(&fc);
    cnn.initialization();
    cnn.train();
    
    
    /*
    
    Mat A(2,2,CV_64FC2);
    Mat x = (Mat_<double>(2,2) << 1,2,3,4);
    Mat y = (Mat_<double>(2,2) << 2,3,4,5);
    vector<Mat> A_array;
    A_array.push_back(x);
    A_array.push_back(y);
    merge(A_array,A);
    
    Mat B(2,2,CV_64FC2);
    Mat n = (Mat_<double>(2,2) << 10,10,10,10);
    Mat m = (Mat_<double>(2,2) << 10,10,10,10);
    vector<Mat> B_array;
    B_array.push_back(n);
    B_array.push_back(m);
    merge(B_array,B);
    
    
    Mat a = B-(A*2);
    
    for(int i=0; i<a.channels(); ++i) {
        Mat s(a.rows,a.cols,CV_64F);
        extractChannel(a,s,i);
        cout << s << endl;
    }
     
    Mat x = (Mat_<double>(2,2) << 1,2,3,4);
    Mat y = (Mat_<double>(2,2) << 5,6,7,8);
    Mat z = (Mat_<double>(2,2) << 9,10,11,12);
    
    Mat A(2,2,CV_64FC3);
    vector<Mat> A_array;
    A_array.push_back(x);
    A_array.push_back(y);
    A_array.push_back(z);
    merge(A_array,A);
    
    cout << A << endl;
    
    Mat B = A.reshape(1,1);
    cout << B << endl;
    
    Mat C = B.reshape(3,2);
    cout << C << endl;
    
    extractChannel(C,x,2);
    cout << x << endl;
    
    
    
    */
    
    
    /*
    Mat x = (Mat_<double>(6,6) << 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36);
    cout << x << endl;
    
    //Mat k1 = (Mat_<double>(3,3) << 2,0,2,0,1,0,2,0,2);
    //Mat k2 = (Mat_<double>(3,3) << 0,1,0,2,0,2,0,1,0);
    Mat k1 = (Mat_<double>(3,3) << -0.2828426966198905,0.4178956214194898,-0.525293186047346,0.4558892835090944,-0.6457526314518063,0.3406905621178566,-0.7056060755421996,0.0248085457481011,-0.7971951331802529);
    Mat k2 = (Mat_<double>(3,3) << 0.4558892835090944,-0.6457526314518063,0.3406905621178566,-0.7056060755421996,0.0248085457481011,-0.7971951331802529,0.2828426966198905,-0.4178956214194898,0.525293186047346);
    Mat kernel(3,3,CV_64FC2);
    vector<Mat> kernel_array;
    kernel_array.push_back(k1);
    kernel_array.push_back(k2);
    merge(kernel_array,kernel);
    
    Mat biases = Mat::ones(1,kernel.channels(),CV_64F);
    
    ActSigmoid activation;
    LayerConvolution conv(2,5,1,&activation);
    
    Mat z = conv.convolve_valid_ff(x,kernel,biases); 
    Mat z_1;
    Mat z_2;
    extractChannel(z,z_1,0);
    extractChannel(z,z_2,1);
    cout << z_1 << endl;
    cout << z_2 << endl;
    
    
    Mat a = activation.compute(z);
    Mat a_1;
    Mat a_2;
    extractChannel(a,a_1,0);
    extractChannel(a,a_2,1);
    cout << a_1 << endl;
    cout << a_2 << endl;
    
    PoolAverage pool;
    Size pool_size(2,2);
    Mat p = pool.down_sampling(a,pool_size,2);
    Mat p_1;
    Mat p_2;
    extractChannel(p,p_1,0);
    extractChannel(p,p_2,1);
    cout << p_1 << endl;
    cout << p_2 << endl;
    
    LayerFC FC(2, &activation);
    Mat fc = FC.transform_to_vector(p);
    cout << fc << endl;
    
    Mat we = (Mat_<double>(2,8) << 1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1);
    Mat bi = (Mat_<double>(2,1) << 2,2);
    Mat output = we * fc + bi;
    output = activation.compute(output);
    cout << output << endl;
    
    Mat target = (Mat_<double>(2,1) << 1,0);
    Mat e = output - target;
    Mat od = e.mul(activation.compute_prime(output));
    Mat delta =  we.t() * od;
    
    Mat reverse = FC.transform_to_image(p.rows,p.cols,p.channels(),delta);
    extractChannel(reverse,p_1,0);
    extractChannel(reverse,p_2,1);
    cout << p_1 << endl;
    cout << p_2 << endl;
    
    Mat reverse_up = pool.up_sampling(reverse,pool_size,2);
    extractChannel(reverse_up,p_1,0);
    extractChannel(reverse_up,p_2,1);
    cout << p_1 << endl;
    cout << p_2 << endl;
    
    Mat ad = reverse_up.mul(activation.compute_prime(a));
    Mat biases_update = Mat::ones(1,ad.channels(),CV_64F);
    for(int i=0; i<ad.channels(); ++i) {
        extractChannel(ad,a_1,i);
        cout << a_1 << endl;
        biases_update.at<double>(0,i) = sum(a_1)[0];
    }
    
    cout << biases_update << endl;
    
    Mat weight_update = conv.convolve_valid_bp(x,ad);
    extractChannel(weight_update,k1,0);
    extractChannel(weight_update,k2,1);
    cout << k1 << endl;
    cout << k2 << endl;
    
    Mat weightfc_update = od * fc.t() / od.cols;
    cout << weightfc_update << endl;
    Mat biasfc_update = od;
    cout << biasfc_update << endl;*/
    
    
    /*
    Mat x = (Mat_<double>(5,5) << 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25);
    //Mat k1 = (Mat_<double>(3,3) << -0.2828426966198905,0.4178956214194898,-0.525293186047346,0.4558892835090944,-0.6457526314518063,0.3406905621178566,-0.7056060755421996,0.0248085457481011,-0.7971951331802529);
    //Mat k2 = (Mat_<double>(3,3) << 0.4558892835090944,-0.6457526314518063,0.3406905621178566,-0.7056060755421996,0.0248085457481011,-0.7971951331802529,0.2828426966198905,-0.4178956214194898,0.525293186047346);
    
    Mat k1 = (Mat_<double>(3,3) << 1,0,1,0,1,0,1,0,1);
    Mat k2 = (Mat_<double>(3,3) << 0,1,0,1,0,1,0,1,0);
    
    Mat kernel(3,3,CV_32FC2);
    vector<Mat> kernel_array;
    kernel_array.push_back(k1);
    kernel_array.push_back(k2);
    merge(kernel_array,kernel);
    
    Mat biases = Mat::ones(1,kernel.channels(),CV_32F);
    
    ActSigmoid activation;
    LayerConvolution conv(2,5,1,&activation);
    
    Mat z = conv.convolve_valid_ff(x,kernel,biases); 
    Mat z_1;
    Mat z_2;
    extractChannel(z,z_1,0);
    extractChannel(z,z_2,1);
    cout << z_1 << endl;
    cout << z_2 << endl;
    
    Mat a = activation.compute(z);
    Mat a_1;
    Mat a_2;
    extractChannel(a,a_1,0);
    extractChannel(a,a_2,1);
    cout << a_1 << endl;
    cout << a_2 << endl;
    
    PoolAverage pool;
    Size pool_size(2,2);
    Mat p = (Mat_<double>(6,6) << 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36);
    cout << p << endl;
    cout << pool.down_sampling(p,pool_size,2) << endl;
    
    Mat fc = (Mat_<double>(4,1) << 1,2,3,4);
    Mat weight = (Mat_<double>(2,4) << 1,0,1,0,0,1,0,1);
    Mat bia = (Mat_<double>(2,1) << 2,2);
    
    cout << fc << endl;
    cout << weight << endl;
    cout << weight*fc+bia << endl;*/
    
    
    /*
    Mat A = (Mat_<float>(5,5) << 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25);
    Mat B = (Mat_<float>(1,1) << 1);
    float b = 1.0f;
    cout << sum(A)[0] << endl;
     
    Mat A = (Mat_<float>(5,5) << 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25);
    Mat B = Mat::zeros(A.rows,A.cols,A.type());
    
    flip(A,B,0);
    cout << B << endl;
    
    flip(A,B,1);
    cout << B << endl;
    
    flip(A,B,-1);
    cout << B << endl;
    
    cout << "******" << endl;
    
    rotate(A,B,ROTATE_90_CLOCKWISE);
    cout << B << endl;
    
    rotate(A,B,ROTATE_90_COUNTERCLOCKWISE);
    cout << B << endl;
    
    rotate(A,B,ROTATE_180);
    cout << B << endl;*/
    
    /*
    convolution.feed_forward(input);
    pooling.feed_forward(convolution.a);
    fc.intialization(pooling.a.rows*pooling.a.cols*pooling.a.channels(),10)
    fc.feed_forward(pooling.a);
    
    
    Mat input;
    
    data.train_images[0].convertTo(input,CV_32F);
    input = input / 255.0f;
    
     
    Mat feature(pooling.z.rows,pooling.z.cols,CV_32F);
    extractChannel(pooling.z,feature,0);  
    cout << feature << endl;
    extractChannel(pooling.z,feature,1);  
    cout << feature << endl;
    extractChannel(pooling.z,feature,2);  
    cout << feature << endl;
    
    imshow("tes", data.train_images[0]);
    waitKey();*/
    
    /*
    Mat A = (Mat_<float>(5,7) << 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35);
    Mat k = (Mat_<float>(5,5) << 1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1);
    
    cout << A << endl;
    cout << k << endl;
    
    ActRelu activation;
    LayerConvolution c(2,3,1,&activation);
    
    cout << c.conv2(A,k,full) << endl;
    cout << c.conv2(A,k,same) << endl;
    cout << c.conv2(A,k,valid) << endl;
    
    
    
    //same
    Mat b1;
    filter2D(A,b1,A.depth(),k,Point(-1,-1),0,BORDER_CONSTANT);
    cout << b1 << endl;
    
    //valid
    Point point(1,1);
    Size size;
    size.height = A.rows-(k.rows-1);
    size.width = A.cols-(k.cols-1);
    Rect rect(point,size);
    cout << b1(rect) << endl;
    
    //full  
    Mat output = Mat::zeros(A.rows+(k.rows-1),A.cols+(k.cols-1),A.type());
    size.height = A.rows;
    size.width = A.cols;
    Rect rect2(point,size);
    A.copyTo(output(rect2));
    Mat b2;
    filter2D(output,b2,output.depth(),k,Point(-1,-1),0,BORDER_CONSTANT);
    cout << b2 << endl;
    */
    
  
    
    /*
    Mat I = Mat::ones(28, 28, CV_32F);
    Mat k = Mat::eye(5, 5, CV_32F) * 3;
    Mat O = Mat::zeros(28, 28, CV_32F);
    Point p;
    p.x = 0;
    p.y = 0;
    
    filter2D(I,O,CV_32F,k,p,0.0,BORDER_ISOLATED);
    Mat b = O.colRange(0, O.cols - 4).rowRange(0, O.rows - 4).clone();
    
    cout << I << endl;
    cout << k << endl;
    cout << O << endl;
    cout << b << endl;
    
    
    DataPreparation data;
    
    Size size_input(28,28);
    Size size_convolution(5,5);
    Size size_pooling(2,2);
    Size size_output(1,10);
    int number_of_feature_maps = 20;
    
    CNN cnn(size_input,size_convolution,size_pooling,size_output,number_of_feature_maps);
    cnn.train_data(&data,30);
    
    
    Mat tes(10,10,CV_32FC1);
    randn(tes,0,1);
    
    Size size_of_pool(2,2);
    Point point(1,0);
    Rect rect(point,size_of_pool);
    Mat local_field = tes(rect);
    
    cout << tes << endl;
    cout << endl << endl;
    cout << local_field << endl;
    cout << endl << endl;
    cout << sum(tes).val[0] << endl;*/
    
    
    /*
    Mat kernels_conv_1;
    vector<Mat> kernel1_array;
    Mat kernel_1 = (Mat_<double>(5,5) << -0.2828426966198905, -0.6793474103642723, 0.4178956214194898, -0.6496324003559693, 0.008493533561015454,
        0.1526476829130345, 0.4558892835090944, -1.357200394721346, -0.7061391825680516, -0.1278163796809295,
        0.5863606110315658, -1.682834951779, -1.055579896692862, 0.4817716279283388, -0.4315651585631741,
        0.7540469292341783, 0.4480364831599104, -0.7700668442513745, -0.2555895335565879, -0.3702051248858229,
        0.310893411065976, -0.3449723434426497, -0.7056060755421996, -0.4031637393045653, -1.3981140577377);
    Mat kernel_2 = (Mat_<double>(5,5) << -0.1933880043811058, -0.525293186047346, -0.4401078859228562, -0.1102162782542671, -0.9305772067342986,
        -0.3091081528552055, -1.391407246990354, -0.5867505199334033, 0.789975733043903, -1.063604521303873,
        -0.7276734560477109, -1.158480915471998, -0.3186208245482707, 0.1692015141755263, -0.5775678685813332,
        -0.0754966000217081, -0.6457526314518063, 0.3250427479046749, -0.4399479470716052, -0.491447953717131,
        -0.01441548574190321, 0.2986793225262971, -0.6271520144770051, 0.3741289203853313, 0.111970244539215); 
    Mat kernel_3 = (Mat_<double>(5,5) << -0.3139486135350609, 0.5104590915778999, -0.4321846566444378, 0.06397999013012168, -0.4399998850074667,
        -0.2696593050891352, 0.158936997055207, 0.5129365926724176, 0.4066711226289499, -0.8250960369780387,
        -0.287788979567523, 0.2239037827140464, 0.06564766752194373, -0.1030049156302084, -0.1103281435123336,
        -1.196778555070978, -1.254516396834106, -0.09446490197439061, 0.2730922346576108, 0.3770501759565832,
        -0.1740964745811269, 0.59178328700375, -0.1220086104978861, -1.218966685050418, -0.4234255176019133);
    kernel1_array.push_back(kernel_1);
    kernel1_array.push_back(kernel_2);
    kernel1_array.push_back(kernel_3);
    merge(kernel1_array,kernels_conv_1);
    layers[0]->set_weights(kernels_conv_1);
    
    Mat kernels_conv_2;
    vector<Mat> kernel2_array;
    Mat kernel2_1 = (Mat_<double>(5,5) << -0.3139486135350609, 0.5104590915778999, -0.4321846566444378, 0.06397999013012168, -0.4399998850074667,
        -0.2696593050891352, 0.158936997055207, 0.5129365926724176, 0.4066711226289499, -0.8250960369780387,
        -0.287788979567523, 0.2239037827140464, 0.06564766752194373, -0.1030049156302084, -0.1103281435123336,
        -1.196778555070978, -1.254516396834106, -0.09446490197439061, 0.2730922346576108, 0.3770501759565832,
        -0.1740964745811269, 0.59178328700375, -0.1220086104978861, -1.218966685050418, -0.4234255176019133);
    Mat kernel2_2 = (Mat_<double>(5,5) << -0.1761438539578464, -0.3447002955201128, -0.4732423292211365, -0.05862079431955181, -0.6888795479574128,
        -0.634768531694931, 0.3316222186113009, -0.2622271739792126, -0.8486470276164937, -0.7693693431622251,
        -0.07220020869684163, -0.1840686841904002, -0.1486082059316658, -0.5198522577822473, 0.02794527734153007,
        -0.05007577917248796, -0.2546197425599246, -0.5054262855119873, 0.1208442032656762, -0.1449855069877657,
        -0.2303401510327969, -1.289092136755926, -0.4460520811769015, 0.721851154237811, -0.2179787174044561); 
    Mat kernel2_3 = (Mat_<double>(5,5) << -0.2828426966198905, -0.6793474103642723, 0.4178956214194898, -0.6496324003559693, 0.008493533561015454,
        0.1526476829130345, 0.4558892835090944, -1.357200394721346, -0.7061391825680516, -0.1278163796809295,
        0.5863606110315658, -1.682834951779, -1.055579896692862, 0.4817716279283388, -0.4315651585631741,
        0.7540469292341783, 0.4480364831599104, -0.7700668442513745, -0.2555895335565879, -0.3702051248858229,
        0.310893411065976, -0.3449723434426497, -0.7056060755421996, -0.4031637393045653, -1.3981140577377);
    Mat kernel2_4 = (Mat_<double>(5,5) << -0.1039806634785236, -0.5703635584548579, -0.1644752671463436, -0.73220238677834, 0.2670960342961735,
        0.01002774183257316, -0.5529801247525938, 0.2987005488910199, -0.1970224404155339, -0.7082070338836957,
        -0.009319240768462578, -1.198494471388813, -0.5928793579338958, 0.3364731166535648, -0.9770600933604783,
        -0.02341896694002799, -0.7649755004557619, 0.339938640796845, -0.1838267386837131, 0.04354219926466385,
        -0.04469670798417269, -0.5150950952599942, 0.1952568862558905, 0.1000149640931909, -0.5252802469502171); 
    Mat kernel2_5 = (Mat_<double>(5,5) << -0.5860349151041078, 0.09186010443949044, -0.6390314998706685, 0.363405167609244, -0.002423033157214149,
        -0.1688371812729201, 0.0248085457481011, -1.087517674943911, 0.1889001345281258, -0.186927242112418,
        -0.1133307685408766, -0.8234891348871543, -0.137117802142825, -0.2589909773506704, 0.1309247545776202,
        0.3729095157887059, 0.5549224271076127, -0.4111200600914628, -0.3501884854051696, 0.001037881256536366,
        -0.4159664136978165, -0.3412380752339743, -0.6780185028366077, 0.8521005377338042, -0.4599979364049886);  
    Mat kernel2_6 = (Mat_<double>(5,5) << -0.1933880043811058, -0.525293186047346, -0.4401078859228562, -0.1102162782542671, -0.9305772067342986,
        -0.3091081528552055, -1.391407246990354, -0.5867505199334033, 0.789975733043903, -1.063604521303873,
        -0.7276734560477109, -1.158480915471998, -0.3186208245482707, 0.1692015141755263, -0.5775678685813332,
        -0.0754966000217081, -0.6457526314518063, 0.3250427479046749, -0.4399479470716052, -0.491447953717131,
        -0.01441548574190321, 0.2986793225262971, -0.6271520144770051, 0.3741289203853313, 0.111970244539215); 
    Mat kernel2_7 = (Mat_<double>(5,5) << 0.06528816085352673, 0.04120398251905044, -0.6389180979124944, 0.3406905621178566, -0.6129370354646539,
        -0.2039515282611717, 0.7810169935746671, 0.3041315154480344, -0.5228836315914123, -0.0639722593655847,
        -0.05536774867252348, -0.7733846395808541, -0.0986068680146559, 0.0193762210838031, -0.2517373394081019,
        -0.03846556812140989, -0.061911187916877, -1.021089983727165, -0.72185256457999, -0.3418129202591729,
        -0.4020611058073769, 0.6171347622558869, 0.07114881166108944, 0.3622203757090574, -0.2022482625820956);    
    Mat kernel2_8 = (Mat_<double>(5,5) << -0.2932728796617852, 0.08162629594409054, 0.293928995655051, 0.4089508624090286, -0.4554060450921611,
        -0.644792695437161, 0.9142079329769786, -0.164192343364121, -0.8976189136832318, -0.38231239768362,
        -0.1689609126816833, -0.3389194726916287, -0.8488167387920384, -0.2065552615100756, -0.932265275183795,
        -0.350263533891308, -0.3189400430343596, -0.3718903607422135, -0.7971951331802529, -0.05030697082005986,
        -0.8181622202420158, -0.08635721043134481, 0.007594065815396789, -0.06901544711698193, -0.1527269600902343); 
    Mat kernel2_9 = (Mat_<double>(5,5) << -0.3139486135350609, 0.5104590915778999, -0.4321846566444378, 0.06397999013012168, -0.4399998850074667,
        -0.2696593050891352, 0.158936997055207, 0.5129365926724176, 0.4066711226289499, -0.8250960369780387,
        -0.287788979567523, 0.2239037827140464, 0.06564766752194373, -0.1030049156302084, -0.1103281435123336,
        -1.196778555070978, -1.254516396834106, -0.09446490197439061, 0.2730922346576108, 0.3770501759565832,
        -0.1740964745811269, 0.59178328700375, -0.1220086104978861, -1.218966685050418, -0.4234255176019133);
    
    kernel2_array.push_back(kernel2_1);
    kernel2_array.push_back(kernel2_2);
    kernel2_array.push_back(kernel2_3);
    kernel2_array.push_back(kernel2_4);
    kernel2_array.push_back(kernel2_5);
    kernel2_array.push_back(kernel2_6);
    kernel2_array.push_back(kernel2_7);
    kernel2_array.push_back(kernel2_8);
    kernel2_array.push_back(kernel2_9);
    merge(kernel2_array,kernels_conv_2);
    layers[2]->set_weights(kernels_conv_2);
    
    Mat weights_fc = (Mat_<double>(10,48) << -0.01935383278495584, -0.4098189007148182, -0.2648198685093043, -0.1466795551152508, 0.1994455618274983, -0.4777263545734668, -0.9059664350258534, -1.054420713893843, -0.428854583392416, -0.108908654743492, -0.8880310162774263, -0.3881953476232682, -0.3633760878464019, -1.441179209900169, 0.4139539798360689, -0.547943821106408, 0.4460071310698221, -0.4688558798318054, -0.4053273489249966, 0.0211630257548332, 0.4912697758394154, -0.1280696861286888, 0.3026935582720503, -0.7020984227951728, -0.1522473880808276, -0.536473374341607, -0.2830116376820531, 0.3322170753901628, -0.5268288950544678, 0.03893832943009867, -0.8143212218343729, 0.2907558599892692, 0.6749459967305547, -2.295864728522389, -0.7651943055972028, 0.2787770210279673, 0.8840285995491688, -1.280973496883838, 0.42904060789103, -0.3011708403461174, -0.2153497027084139, -0.7455407171508537, -0.7400051295819552, 0.3333311327574488, -0.2482451834542096, -0.8809311243814388, -1.004434827832908, -0.8352819949524897,
        0.4350869456729522, 0.4860940254260779, 1.532574550023691, -0.1333920361546302, -0.4361777104380002, -1.078153785949928, -0.97019704138876, 0.4657082632639492, -1.090671057854814, -0.6085304100816651, 0.7493050317229009, -0.2252269738218703, 0.1750895133085943, -0.8204875692377023, 0.4635709417509401, -0.1014235626361733, -1.551124280003487, -0.01088111517188151, -0.2778246603302913, -0.5016156596023408, 0.269249982466186, -0.331615582878189, -1.186863868862983, 0.054070200728913, -1.106662704153767, -0.5361924636415305, 0.3828769324175815, -0.2810567533193505, -0.6691032152042398, -0.47110999984616, -0.3863167752891941, 0.4395868080332019, -0.6263127878064991, 0.3634221841937939, -0.3696564683536505, -0.2269082108463672, -0.706159464031779, -0.03336971045901421, 1.246212575847205, -0.1291763627125496, -1.362272922166723, -0.4363259683305165, -0.3003265745766049, -0.8816763342861251, 0.6810102784430898, -0.7439713133733981, -1.267120782450642, -0.8105465933363966,
        0.2337846087860665, -1.508101559221946, -0.2933705001212873, 0.7140597012431826, -0.8488859865696901, -0.7144363704191261, -0.1822067644237806, -0.07390694762940325, -0.3360242524241368, -0.6254809830999123, -0.4665069598848858, 0.3938326222583565, -0.321644641079722, 0.1204064199923993, 0.7701765069470057, -0.04354436004647505, 0.2707660528943197, -0.5442329740797449, 0.1203695735878714, -1.286900591878995, 0.7596844453305294, 0.2506791261920143, -0.2250113399206583, 0.1988488494511536, -0.8258866602403996, -0.3265119062343613, 0.6975384022572912, 0.2985094017337386, -1.143842298333404, -0.5498891847377637, -0.01239314054728097, 0.1397547699096678, 0.5102897288214276, -0.8827569960047705, -0.9249267666144831, 0.6872177281832077, -0.420191192345713, 0.0707158036102043, -0.6534284249791875, -0.1854392887573257, -0.3408419234106934, 1.143566237862436, -0.5192370979067734, 0.1881574108278667, -0.6188497613659918, -0.7977838960044726, -0.3903693334175777, -0.5366897942483266,
        0.07543873816768942, -0.9983397193677812, 1.074605872113734, -0.1617056224043933, -0.4043202554047778, -1.123482225131768, -0.6778385353403228, -0.9287119390887812, -0.442476432671332, 1.628333179257797, 0.01150255796541716, -1.330780787156749, 0.3909891994073816, -0.5274035801057332, -0.6854834166160805, -0.4637027606258275, -0.8237042871921978, -1.037424820948278, -1.489932332591301, 0.5107637093133877, -0.4967716035132183, -0.3995579199248651, 0.001085301068226741, -0.003601803140630522, -0.92320802179058, 0.2908857617775526, -0.2047478495421294, -0.303299933963058, -1.895767067242331, 0.2107748535056507, -0.04925116261997203, 0.09748293360916105, -0.661565652436571, -1.417159955155846, 0.08637702086210064, 0.2510250069570986, -1.387223957684028, 0.1936253252396458, -0.9640280484059174, -0.1929804460623769, 0.8283860810711623, 0.2220899970846659, -1.456476487431172, -0.920109166320495, -0.2134058823317743, -0.8095883951100116, 0.3457334561495626, -0.2213522925740339,
        0.1520588234424634, 0.1530620348623091, 1.110504008923829, -0.6545513009448516, -0.5117517757490622, 0.7932460369877328, -0.2359053858416835, -0.7324782258158045, -0.399349748283259, 0.1026660072933256, -1.055074977210038, -0.5769434367973937, -0.6249173596383517, -0.2331930342018204, -0.7322928051994706, -0.4994955535270352, -0.5809501094579119, -0.1209061086157182, 0.009292770578778919, 0.3955042450935346, -0.5029400788826779, 0.5019873635239802, -0.296532624242019, -0.4386935607009586, -0.9721886643198689, -0.362241445761706, 0.1329919785221184, 0.6241428949920891, 0.2044148803553227, 0.9038511216670577, 0.1136621093197119, -0.2356145829747306, -0.7764693053827314, -0.1549583402474698, -0.6126918491437199, -0.1991179988249148, -1.524969620832759, 0.5005460978151324, -0.1118830146095165, -0.4572903168151495, -1.042607779607246, 0.1917574310779556, -0.9369199453835824, -0.09244375644548877, -0.5824916963087442, -0.3445701991509446, -0.6354215947547632, 0.1961019710815534,
        -0.1106919862150821, -0.981773867289214, -0.519921210261392, -0.9191118595273895, -0.08834508279884712, 0.5672008985304626, -0.09309847986246891, -0.7891150220900824, -0.002762483454556264, -0.4467086793271037, 0.1454829096570667, 0.04321634652853962, -1.402562260868356, -0.5657491846996234, -0.2985843142891461, -0.4357564594130818, 1.133963167645942, -1.091928896717396, -0.9350889359681522, 0.3409586068868426, 0.7596742464297963, -0.6967475273496986, -0.6654524305008783, 0.5518040091795187, -0.5735114108464088, -1.646418667545581, 0.2221986958951097, -0.9555006171411662, 0.1497912934073142, 0.2352967683575283, -0.8139234263640538, -1.00191631281957, 0.03525200194110012, -1.223893086769406, -1.673513849404205, 0.2066468292631026, -0.843355920210211, -0.8590927090160347, 0.6870656648737825, -0.8445145690119047, 0.9005232893729975, -0.5481168956850124, -0.92812561732183, 0.06773829972214929, 0.05599464894541967, -0.4492010452791638, -1.023919559291181, -0.4628820750215437,
        0.05097625300053421, -1.133304149954969, 0.185185888250016, 0.5285184618202587, -0.5360330003778142, 0.4492179443975776, -0.2812391784878657, -0.6144049577330075, -1.135270237292513, 0.08240615937934415, -0.4421832430315573, -0.505855910094684, -1.458176176414231, -0.6418984335044677, -1.790605665000112, -0.727095621757901, -1.294727979799448, -0.8673689252522045, -0.951470632707544, -1.739924643336585, 0.3409512452742835, -0.3595190629661879, 0.6954985454272269, -0.821231897282551, 0.4391666593330808, -0.8026432121029625, 0.3532615485094079, 0.1766451140625014, 0.4680639025994157, 0.04864396377990376, 0.007839848983379194, -1.820385228205047, 0.4276668236306413, 0.1867736193754053, -0.7163674134135504, -0.7801919041502766, -0.6206538357146366, -0.4159154182385987, 0.3921442824279921, -0.838106668696478, -0.3817454726966482, -0.4917031907788358, -0.3492599034085085, 0.09258753794078484, 0.1359105511679681, -1.049084311623094, -0.9070112472250049, -0.4437317697358959,
        -0.1477917337376649, 0.8348072476258883, -0.2428433797739676, -0.656691229695642, 0.4875097555413611, 0.1709589201699969, -0.3495646051533399, -0.5434033356810206, 0.5487430353407277, 0.09237646670569022, -0.04771862441791036, -0.6327107001007192, -0.5384799313773607, 0.187420827812898, -0.5722966680906834, 0.1978991247475581, -0.9916106687044612, -1.614463594462486, -0.1677831128436295, 0.2699403636939996, -0.2378380967014531, 0.96892854352466, -0.1286456747988449, -1.116918350650245, -0.6089558882825452, -1.01643801379408, -1.956091954725284, -0.1068402333230288, -1.005935599909942, 0.2526799894805544, -0.3425665632759036, -0.3977048496353399, -0.949174039639479, -1.187301731443325, 0.9290342013469048, -0.9406578808439594, -1.00430576956273, -0.3083098815469157, 0.408258392219205, 0.3987986433972222, 0.05681236306546744, -0.7310008805370705, -0.4109781917405244, -0.3326408413930697, -0.3693693367075442, 0.5785170006527798, -0.9795227475153947, -0.4324587157932703,
        0.2191943144528674, -0.2659246184211281, -0.5638111059973626, -1.225511107863138, -0.07166744540040385, -0.6146416795868629, -1.119180052742118, -0.1256428270258856, -1.143635252980178, -0.429398997646205, -0.3499486167709767, 0.1482854985633776, -1.186983188333213, 0.03013606462980578, -0.5165482880904069, 0.9523329382619996, -0.04641174647999935, -0.5850118791874276, 0.1247962799233145, -0.07965876339636094, -0.561004241987925, 1.345526250479672, 0.2990511320662821, -1.385967422440337, 0.5426180970080436, 0.9565381060694906, 0.17688724210058, -0.4315407763855682, -1.148155513141894, 0.3024576799363006, -0.06138365607258028, -0.05477482591019395, 0.4371840850507424, -1.439144720912595, -0.02248719581391184, 0.04501357687800833, 0.208769772626582, 0.1988865393737873, -0.8095832189761809, -0.001870156323882877, -0.5899561605642044, -0.8549490413467986, -0.5089779239709445, -0.495521931439569, -1.229173050010535, -0.8589855438748741, -0.9826071098107538, -0.1697770362786633,
        0.2027939069482209, 0.8855405674119703, -0.7777050210659038, -1.237332247280399, -0.8114614654055323, 0.06849562561417272, -0.57696789882246, -1.225983554685815, -0.6446556833125954, 0.21881388778718, -0.9547248105342807, 1.251433339454003, 0.2782245166687097, -0.124615843732151, -0.9872963803274735, 0.7597437216483234, -0.7546935020658123, -0.3558661598821291, -0.7548657714680431, 0.3708087955622677, 0.4825799289975779, -1.345308469441463, 0.1962490499658083, -1.140782474746576, -0.3468121983852456, -0.4296219644036771, -1.204027851961982, -0.8735108106304674, -0.6858975840059973, 0.2011299524594587, -0.6651649825354824, 0.2809448625597111, -0.5949378443006244, -0.7703214386942642, -0.02926534306515882, -1.092236167358277, 0.5758470357977301, 0.210862426021719, -0.6946526884758331, 0.5426632635684328, -0.1765808820758362, -0.2780226905837626, -0.7961579765139326, 0.1992913513810767, 0.03835173927102281, -0.2483329476789383, -0.4992473483244221, 1.117904883416636); 
    layers[4]->set_weights(weights_fc);*/
    
    /*
    Mat input = (Mat_<double>(28,28) << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3411764705882353, 0.6235294117647059, 0.9921568627450981, 0.6235294117647059, 0.9529411764705882, 0.7490196078431373, 0.2392156862745098, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0.2901960784313725, 0.9921568627450981, 0.9882352941176471, 0.9882352941176471, 0.9882352941176471, 0.9882352941176471, 0.9921568627450981, 0.9254901960784314, 0.2549019607843137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0.1019607843137255, 0.803921568627451, 0.9921568627450981, 0.9882352941176471, 0.9882352941176471, 0.9882352941176471, 0.9882352941176471, 0.9921568627450981, 0.9882352941176471, 0.792156862745098, 0.05098039215686274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0.2313725490196079, 0.6274509803921569, 0.796078431372549, 0.6274509803921569, 0.6274509803921569, 0.6274509803921569, 0.4235294117647059, 0.9921568627450981, 0.9882352941176471, 0.9882352941176471, 0.1764705882352941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04313725490196078, 0, 0, 0, 0.2078431372549019, 0.9921568627450981, 0.9882352941176471, 0.9882352941176471, 0.1764705882352941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.9058823529411765, 1, 0.9921568627450981, 0.6784313725490196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03529411764705882, 0.1843137254901961, 0.5490196078431373, 0.9568627450980391, 0.9921568627450981, 0.9882352941176471, 0.4, 0.03529411764705882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5098039215686274, 0.9882352941176471, 0.9882352941176471, 0.9882352941176471, 0.9921568627450981, 0.9882352941176471, 0.9882352941176471, 0.3019607843137255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2431372549019608, 0.9254901960784314, 0.9882352941176471, 0.9882352941176471, 0.2509803921568627, 0.8274509803921568, 0.9882352941176471, 0.9882352941176471, 0.7607843137254902, 0.03529411764705882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2980392156862745, 0.8274509803921568, 0.8666666666666667, 0.1686274509803922, 0.007843137254901961, 0.3372549019607843, 0.9882352941176471, 0.9882352941176471, 0.9882352941176471, 0.5019607843137255, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.392156862745098, 0.9921568627450981, 0.9921568627450981, 0.580392156862745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1843137254901961, 0.9882352941176471, 0.9882352941176471, 0.9882352941176471, 0.2901960784313725, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1333333333333333, 0.9176470588235294, 0.9882352941176471, 0.9882352941176471, 0.7803921568627451, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3529411764705882, 0.9882352941176471, 0.9882352941176471, 0.6980392156862745, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4784313725490196, 0.9882352941176471, 0.9882352941176471, 0.4941176470588236, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3411764705882353, 0.6039215686274509, 0, 0, 0, 0, 0.1411764705882353, 0.8705882352941177, 0.9921568627450981, 0.9529411764705882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5411764705882353, 0.9254901960784314, 0.3058823529411765, 0.03529411764705882, 0.08627450980392157, 0.2235294117647059, 0.8588235294117647, 0.9882352941176471, 0.9215686274509803, 0.2352941176470588, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5411764705882353, 0.9882352941176471, 0.9882352941176471, 0.7686274509803921, 0.8431372549019608, 0.9921568627450981, 0.9882352941176471, 0.9882352941176471, 0.5019607843137255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3803921568627451, 0.9882352941176471, 0.9882352941176471, 0.9882352941176471, 0.9882352941176471, 0.9921568627450981, 0.9882352941176471, 0.396078431372549, 0.03529411764705882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05098039215686274, 0.8274509803921568, 0.9882352941176471, 0.9882352941176471, 0.7843137254901961, 0.5372549019607843, 0.2509803921568627, 0.02352941176470588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);*/
    
    //Mat target = (Mat_<double>(10,1) << 0,0,0,1,0,0,0,0,0,0);
    
    return 0;
}

